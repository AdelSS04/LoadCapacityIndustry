<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO/v
        7xD39/db9vb2qPf399P29vby9vb2//b29vL39/fT9vb2qPf391ru7u4PAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPf3
        9yD29vaj9vb26vb29qv39/dh9vb2NvT09BcAAAAA9PT0F/b29jf39/di9vb2q/b29ur29vai9/f3HwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//
        /wX29vaJ9vb25vb29nH///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////B/b2
        9nP29vbn9vb2h////wUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADz8/MW9vb2wfb29qvw8PARAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPHx8RL29vat9vb2wPPz8xUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAD5+fko9vb25vb29nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD39/d+9vb2/wAAAAAAAAAAAAAAAPb2
        9nH29vbm+Pj4JwAAAAD39/d+9vb2jwAAAAD39/de9vb2qQAAAAAAAAAAAAAAAPf392P29vamAAAAAPb2
        9jr29vbMAAAAAP///wf5+fkqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPz8xX29vbhAAAAAAAA
        AAAAAAAAAAAAAPn5+Sr///8G////Afb29tz19fU0AAAAAPb29qn39/dgAAAAAAAAAAAAAAAA8vLyFPb2
        9u7///8J////Afb29sv19fVPAAAAAAAAAAD4+Pgj9fX11f///wsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////DfX19dX4+PgjAAAAAAAAAAD29vZV9vb2zwAAAAD///8K9vb27/Ly8hMAAAAAAAAAAAAA
        AAAAAAAA9vb2rfb29nUAAAAA9/f3QPb29t3u7u4PAAAAAPb29lf19fVlAAAAAPf390D39/chAAAAAAAA
        AAAAAAAA+Pj4Ivf39z8AAAAA9fX1Zvb29lYAAAAA8PDwEfb29uT29vY5AAAAAPf393n29varAAAAAAAA
        AAAAAAAAAAAAAAAAAADz8/Ms9vb26e/v7xAAAAAA9vb2k/f397j///8EAAAAAAAAAAAAAAAA9vb22vX1
        9TMAAAAA9vb22gAAAAD19fU09vb22QAAAAAAAAAAAAAAAP///wn19fW79vb2iQAAAADw8PAR9vb26fPz
        8ysAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD29vaT9vb2rf///wH///8D9/f3tPb29q////8OAAAAAAAA
        AAD09PRIAAAAAAAAAAD39/fUAAAAAAAAAAD09PRIAAAAAAAAAAD///8B9/f3tvf395v///8B////Avb2
        9rH29vaRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wv29vbO9/f3fAAAAAD///8G9vb2jfb2
        9tj09PRI////AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8vLyFP///wH39/dd////AgAA
        AAD39/d/9vb2zf///woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPT09Bf29vbd9fX1g///
        /wEAAAAA+Pj4Rfb29sb39/fT9/f3fPb29jrw8PAR8PDwEfDw8BH///8G////DPb29sX29vbCAAAAAAAA
        AAD///8B9fX1hPb29t3z8/MWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPz
        8xb29vbB9vb2q/Dw8BEAAAAAAAAAAPf39z329vaK9vb2zfb29u729vbu9vb27vf392D///8B9vb2N///
        /wIAAAAA8fHxEvb29q329vbA8/PzFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///wX29vaJ9vb25vb29nH///8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////B/b29nP29vbn9vb2h////wUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD39/cg9vb2o/b29ur29var9/f3Yfb29jv39/ch8PDwEff3
        9yH29vY79/f3Yvb29qv29vbq9vb2ovf39x8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7+/vEPf391v29vao9vb2x/b2
        9uD29vbu9vb24Pb29sf29vao9/f3Wu7u7g8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////8B///4/j//5//P/8//5/+f//P/Pwn5/n///P7+AP79x/
        /HfbP/m328/nt7dwHdu3/b/bt/6/27Z+vNu3/z/bt/8/27d/vdvb/7+329/3t93//3fs9t5v5n78z/c/
        /9/5z+c//PB+f/5//P//j+P///Af//////8=
</value>
  </data>
</root>